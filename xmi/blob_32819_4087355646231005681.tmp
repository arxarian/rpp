# -*- coding: windows-1252 -*-
#!/usr/bin/env python
###############################################################################
#
# File:   ModenaMappingAssistant.py
#
# Author: Andrey Martin
#
# Description: This utility produces an excerpt of the published Modena-Models, 
# containing Model Attributes and Events.
# 
# Usage:  python ModenaMappingAssistant.py <host_name>:<host_ip>
# E.g.:   python ModenaMappingAssistant.py audiinlxyz5158:3333
#         The resulting file is saved under:
#         EXAM\tools\MappingAssistantModena\ModenaMappingLog.txt
# Changes:
# 22.10.2008 Propadovic Added a break in the loop where CORBA.ORB_init is called
# 21.07.2009 Propadovic Added search for the core modules directory, 
#            according to the new directory structure for EXAM 2.0
###############################################################################

import sys
import time
import win32file
import os

sCoreDir = ""

def selectFile(sRootDir, sDirName, fnames):
    #We look for the core plugin in the direct 
    #subdirectories of the plugins folder
    if os.path.abspath(sDirName) == sRootDir: 
        global sCoreDir
        sDirPath = os.path.abspath(sDirName)
        #Out of the subfolders we choose those, which accord to a string pattern:
        lSubDirs = [fname for fname in fnames if os.path.isdir(sDirPath + "\\" + fname) and fname.startswith(r"de.exam.testrunner.modules.core")]
        #Then we choose the newest version:
        sCoreDir = max(lSubDirs)
        
def findCoreDir():
    global sCoreDir
    #Go to the plugins folder in the testrunner folder...
    sModenaMapAsPyFile = os.path.dirname(sys.argv[0])        
    sTestRunnerDir = os.path.normpath(os.path.abspath(sModenaMapAsPyFile)  + r"\..\EXAM testrunner")
    sPluginsDir = sTestRunnerDir + r"\Plugins"
    #There search for the newest subfolder
    os.path.walk(sPluginsDir, selectFile, sPluginsDir)
    sCoreDir = sPluginsDir + "\\" + sCoreDir


findCoreDir()

    
if sys.version[:3]=="2.2":
    sys.path.append(sCoreDir + r"\core_220\omniORB")
    sys.path.append(sCoreDir + r"\core_220\Modena")
elif sys.version[:3]=="2.5":
    sys.path.append(sCoreDir + r"\core_250\omniORB")
    sys.path.append(sCoreDir + r"\core_250\Modena")
else:
    raise "No omniORB available for Python Version", sys.version
    
# Import the CORBA module
from omniORB import CORBA

# Import the stubs for the test automation module 
import MODENATestAutomation
import MODENATestAutomation__POA

logFile = open( 'ModenaMappingLog.txt', 'w')
sys.stdout = logFile
#
# connect the TestAutomation Interface
#['C:\\Aktuelle_Projekte\\Corba\\test.py', 'corbaloc::localhost:3333/MODENATestAutomation']
#orb = CORBA.ORB_init(sys.argv, CORBA.ORB_ID)

ior = 'corbaloc::' + sys.argv[1] + '/MODENATestAutomation'
count = 10
while count:
  try:
    orb = CORBA.ORB_init(['', ior], CORBA.ORB_ID)
    break
  except:
    sys.stdout.write("  Try: " + str(count) + "\n")
  count = count - 1
  
# get root poa and its manager; activate the manager
poa = orb.resolve_initial_references("RootPOA")
poaManager = poa._get_the_POAManager()
poaManager.activate()

# Get the IOR of the MODENA Testautomation Interface object from the command line 
# (without checking that the arguments are sensible!)
#ior = sys.argv[1]
#print sys.argv
#print type(sys.argv)


# Convert the IOR to an object reference
obj = orb.string_to_object(ior)


# Narrow reference to an MODENATestAutomation.MODENATAI object
ta  = obj._narrow(MODENATestAutomation.MODENATAI)

# initialize and start the model
if ta.init():
  if ta.start():
    print "AudioDemo_ta model initialized and started"
  else:
    print "Starting AudioDemo_ta model failed!"
else:
  print "ta.init() failed!"  

  #print "Initializing AudioDemo_ta model failed!"
  
  
#all models
modenaModelList = ta.getAllMODENAModels()
sys.stdout.write("  Anzahl ModenaModel " + str(len(modenaModelList)) + "\n")
for i in modenaModelList:
  try:
    sys.stdout.write("  ModenaModel " + i._get_name() + " exports:\n")
        
    for j in i.getAttributeNames():
      sys.stdout.write("    Attribute: " + i._get_name() + '/' + j + '\n')
          
    for j in i.getEventNames():
      sys.stdout.write("    Event: " + i._get_name() + '/' + j + '\n')
  except:
    sys.stdout.write("    exception: " + i._get_name() + 'has no attributes or events\n')
logFile.close()
  
